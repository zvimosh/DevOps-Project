
name: Deploy

on:
  #push:
  #  branches: ["dev"]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # AWS ENV
  AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
  KOPS_PROVIDER: aws
  KOPS_BUCKET_STATE: kops-foxyandpuff-com-cluster-state
  KOPS_BUCKET_OIDC_STORE: kops-foxyandpuff-com-cluster-oidc-store
  KOPS_CLUSTER_NAME: kops.foxyandpuff.com
  KOPS_DNS_ZONE: kops.foxyandpuff.com
  KOPS_CLUSTER_ZONES: us-east-1a #,us-east-1b,us-east-1c

permissions:
  contents: read

jobs:
  deploy:
    runs-on: [ubuntu-latest]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #   run: |
    #     # Get the DB password from the secrets store
    #     echo ${{ secrets.DB_PASSWORD }} > ./db/password.txt
    #     # Build the images
    #     export DOCKER_REPO=$ECR_REGISTRY
    #     docker buildx bake --load
    #     docker push $ECR_REGISTRY/react-backend:1.0.0
    #     docker push $ECR_REGISTRY/react-backend:latest
    #     docker push $ECR_REGISTRY/react-frontend:1.0.0
    #     docker push $ECR_REGISTRY/react-frontend:latest
    #     #echo "$GITHUB_OUTPUT"
    
    # - name: export aws
    #   run: |
    #     export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
    #     export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)

    - name: install kops
      run: |
        # install kops
        sudo apt-get update
        curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
        chmod +x kops
        sudo mv kops /usr/local/bin/kops        

    - name : create kops cluster
      run: |
        # export KOPS env variables
        export KOPS_CLUSTER_NAME=${{ env.KOPS_CLUSTER_NAME }}
        export KOPS_PROVIDER=${{ env.KOPS_PROVIDER }}
        export KOPS_STATE_STORE=s3://${{ env.KOPS_BUCKET_STATE }}
        export KOPS_DISCOVERY_STORE=s3://${{ env.KOPS_BUCKET_OIDC_STORE }}
        export KOPS_DNS_ZONE=${{ env.KOPS_DNS_ZONE }}
        export KOPS_CLUSTER_ZONES=${{ env.KOPS_CLUSTER_ZONES }}

        # create kops cluster
        kops create cluster --name ${KOPS_CLUSTER_NAME} --cloud=$KOPS_PROVIDER --state ${KOPS_STATE_STORE} --zones ${KOPS_CLUSTER_ZONES} --node-count=1 --node-size=t2.micro --master-size=t2.micro --dns-zone=${KOPS_DNS_ZONE} --discovery-store=${KOPS_DISCOVERY_STORE}/${NAME}/discovery --yes

        #kops create cluster --name ${KOPS_CLUSTER_NAME} --cloud=$KOPS_PROVIDER --state ${KOPS_STATE_STORE} --zones ${KOPS_CLUSTER_ZONES} --node-count=1 --node-size=t3.medium --master-size=t3.medium --dns-zone=${KOPS_DNS_ZONE} --discovery-store=${KOPS_DISCOVERY_STORE}/${NAME}/discovery --yes
        #kops update cluster --name ${KOPS_CLUSTER_NAME} --state ${KOPS_STATE_STORE} --yes
        kops validate cluster --name ${KOPS_CLUSTER_NAME} --state ${KOPS_STATE_STORE} --wait 1m
      continue-on-error: true
      
    - name: get kube config
      if: success() 
      uses: actions/upload-artifact@v3
      with:
        name: kubeconfig
        path: ~/.kube/config

    - name: destroy cluster
      if: always()
      run: |
            # export KOPS env variables
            export KOPS_CLUSTER_NAME=${{ env.KOPS_CLUSTER_NAME }}
            export KOPS_PROVIDER=${{ env.KOPS_PROVIDER }}
            export KOPS_STATE_STORE=s3://${{ env.KOPS_BUCKET_STATE }}
            export KOPS_DISCOVERY_STORE=s3://${{ env.KOPS_BUCKET_OIDC_STORE }}
            export KOPS_DNS_ZONE=${{ env.KOPS_DNS_ZONE }}
            export KOPS_CLUSTER_ZONES=${{ env.KOPS_CLUSTER_ZONES }}
            # delete kops cluster
            kops delete cluster --name ${KOPS_CLUSTER_NAME} --yes





